// Code generated by go2go; DO NOT EDIT.


//line map_test.go2:1
package in

//line map_test.go2:1
import (
//line map_test.go2:1
 "fmt"
//line map_test.go2:1
 "testing"
//line map_test.go2:1
)

//line map_test.go2:6
func Test_Map(t *testing.T) {
	type Test struct {
		Elements instantiate୦୦Map୦string୦int
	}

	var m = make(instantiate୦୦GoMap୦string୦int)
	m.Set("a", 1)
	m.Set("b", 2)
	m.Set("c", 3)

	fmt.Println(m.Get("a"))

	m.Delete("a")

	fmt.Println(m.Len())

	for i, v := range m {
		fmt.Println(i, v)
	}
}

//line map_test.go2:25
type instantiate୦୦Map୦string୦int interface {
//line map.go2:4
 Set(

//line map_test.go2:8
  string, int)
//line map.go2:5
      Get(

//line map_test.go2:8
  string) int
//line map.go2:7
      Keys() []string
//line map.go2:9
      Delete(string,
//line map.go2:9
 )

	Len() int
}
//line map.go2:12
type instantiate୦୦GoMap୦string୦int map[string]int

//line map.go2:17
func (m instantiate୦୦GoMap୦string୦int,) Set(key string,

//line map.go2:17
 val int,

//line map.go2:17
) {
	m[key] = val
}

func (m instantiate୦୦GoMap୦string୦int,) Get(key string,

//line map.go2:21
) (val int,

//line map.go2:21
) {
	return m[key]
}

func (m instantiate୦୦GoMap୦string୦int,) Keys() (keys []string,

//line map.go2:25
) {
	keys = make([]string, 0, len(m))
	for key := range m {
		keys = append(keys, key)
	}
	return
}

func (m instantiate୦୦GoMap୦string୦int,) Delete(key string,

//line map.go2:33
) {
	delete(m, key)
}

func (m instantiate୦୦GoMap୦string୦int,) Len() int {
	return len(m)
}

//line map.go2:39
var _ = fmt.Errorf
//line map.go2:39
var _ = testing.AllocsPerRun
