// Code generated by go2go; DO NOT EDIT.


// types.go2:1
package db

// types.go2:1
import (
// types.go2:1
 "encoding/json"
// types.go2:1
 "fmt"
// types.go2:1
 "reflect"
// types.go2:1
 "testing"
// types.go2:1
 "time"
// types.go2:1
)

// types.go2:13
type (
	Int8  struct{ instantiate୦୦Type୦int8 }
	Int16 struct{ instantiate୦୦Type୦int16 }
	Int32 struct{ instantiate୦୦Type୦int32 }
	Int64 struct{ instantiate୦୦Type୦int64 }

	Float32 struct {
// types.go2:19
  instantiate୦୦Type୦float64
// types.go2:19
 }
			Float64 struct {
// types.go2:20
  instantiate୦୦Type୦float64
// types.go2:20
 }

			Rune = Int32

			Bool  struct{ instantiate୦୦Type୦bool }
			Bytes struct {
// types.go2:25
  instantiate୦୦Type୦୮6୮7byte
// types.go2:25
 }
			String struct{ instantiate୦୦Type୦string }

			Time struct {
// types.go2:28
  instantiate୦୦Type୦time୮aTime
// types.go2:28
 }

			UUID struct {
// types.go2:30
  instantiate୦୦Type୦db୮auid
// types.go2:30
 }
)

// types.go2:250
// types.go2:331
type instantiate୦୦Type୦int8 struct {
// types.go2:34
 driver        Driver
			table, column string
			field         int
			view          Table

			key bool

			value int8

// types.go2:42
 slice []int8

			master *int8
}

func (t instantiate୦୦Type୦int8,) Column() string {
	return t.column
}

func (t instantiate୦୦Type୦int8,) FieldName() string {
	return t.column
}

func (t instantiate୦୦Type୦int8,) Field() int {
	return t.field
}

func (t instantiate୦୦Type୦int8,) Database() Driver {
	return t.driver
}

func (t instantiate୦୦Type୦int8,) Table() string {
	return t.table
}

func (t *instantiate୦୦Type୦int8,) Master() bool {
	return t.master == &t.value
}

func (t instantiate୦୦Type୦int8,) Key() bool {
	return t.key
}

func (t instantiate୦୦Type୦int8,) String() string {
	return fmt.Sprint(t.value)
}

func (t instantiate୦୦Type୦int8,) Increasing() Sorter {
	return Sorter{
		t.column,
		false,
	}
}

func (t instantiate୦୦Type୦int8,) Decreasing() Sorter {
	return Sorter{
		t.column,
		true,
	}
}

func (t instantiate୦୦Type୦int8,) Value() int8 {
	return t.value
}

func (t instantiate୦୦Type୦int8,) Equals(val int8,

// types.go2:97
) Condition {
	return Condition{
		Table:    t.table,
		View:     t.view,
		driver:   t.driver,
		Column:   t.column,
		Operator: OpEquals,
		Value:    val,
	}
}

func (t instantiate୦୦Type୦int8,) NotEquals(val int8,

// types.go2:108
) Condition {
	return Condition{
		Table:    t.table,
		View:     t.view,
		driver:   t.driver,
		Column:   t.column,
		Operator: OpNotEquals,
		Value:    val,
	}
}

func (t instantiate୦୦Type୦int8,) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.value)
}

func (t instantiate୦୦Type୦int8,) Interface() interface{} {
	return t.value
}

func (t instantiate୦୦Type୦int8,) Type() reflect.Type {
	return reflect.TypeOf([0]int8{}).Elem()
}

func (t *instantiate୦୦Type୦int8,) Pointer() interface{} {
	return &t.value
}

func (t *instantiate୦୦Type୦int8,) Make(length int) interface{} {
	if len(t.slice) != length {
		t.slice = make([]int8, length)
	}
	return t.slice
}

func (t *instantiate୦୦Type୦int8,) Slice(index int) interface{} {
	if index < len(t.slice) && index >= 0 {
		return &t.slice[index]
	}
	return nil
}

func (t *instantiate୦୦Type୦int8,) Index(index int) bool {
	if index < len(t.slice) && index >= 0 {
		t.value = t.slice[index]
		return true
	}
	return false
}

func (t *instantiate୦୦Type୦int8,) setprivate(
	table, column string,
	field int,
	key bool,
	driver Driver,
	view Table,
) {

	t.table = table
	t.column = column
	t.field = field
	t.key = key
	t.driver = driver
	t.view = view
}

func (t *instantiate୦୦Type୦int8,) Set(val int8,

// types.go2:173
) {
	t.value = val
}

func (t instantiate୦୦Type୦int8,) To(val int8,

// types.go2:177
) Update {
	return Update{
		Table:  t.table,
		driver: t.driver,
		Column: t.column,
		Value:  val,
	}
}

func (t instantiate୦୦Type୦int8,) On(other struct{ instantiate୦୦Type୦int8 }) Linker {
	return Linker{
		From: t,
		To:   other,
	}
}

// types.go2:194
func (t instantiate୦୦Type୦int8,) Test(ctx *testing.T) {
	var Testable struct {
		View `db:"testable"`

		Value instantiate୦୦Type୦int8
	}

	defer Open().Connect(&Testable).Close()

	shouldNotError(
		Sync(Testable),
	).Test(ctx)

			var zero int8

// types.go2:211
 var test = Testable
	test.Value.Set(zero)

	shouldNotError(
		Insert(test),
	).Test(ctx)

// types.go2:219
 var result = Testable

	shouldNotError(
		If(Testable.Value.Equals(zero)).Get(&result),
	).Test(ctx)

			shouldBe(zero)(result.Value.Value()).Test(ctx)

// types.go2:228
 shouldNotError(
		If(Testable.Value.Equals(zero)).Update(
			result.Value.To(zero),
		),
	).Test(ctx)

// types.go2:235
 shouldNotError(
		Delete(&Testable),
	).Test(ctx)
}

// types.go2:238
type instantiate୦୦Type୦int16 struct {
// types.go2:34
 driver        Driver
			table, column string
			field         int
			view          Table

			key bool

			value int16

// types.go2:42
 slice []int16

			master *int16
}

func (t instantiate୦୦Type୦int16,) Column() string {
	return t.column
}

func (t instantiate୦୦Type୦int16,) FieldName() string {
	return t.column
}

func (t instantiate୦୦Type୦int16,) Field() int {
	return t.field
}

func (t instantiate୦୦Type୦int16,) Database() Driver {
	return t.driver
}

func (t instantiate୦୦Type୦int16,) Table() string {
	return t.table
}

func (t *instantiate୦୦Type୦int16,) Master() bool {
	return t.master == &t.value
}

func (t instantiate୦୦Type୦int16,) Key() bool {
	return t.key
}

func (t instantiate୦୦Type୦int16,) String() string {
	return fmt.Sprint(t.value)
}

func (t instantiate୦୦Type୦int16,) Increasing() Sorter {
	return Sorter{
		t.column,
		false,
	}
}

func (t instantiate୦୦Type୦int16,) Decreasing() Sorter {
	return Sorter{
		t.column,
		true,
	}
}

func (t instantiate୦୦Type୦int16,) Value() int16 {
	return t.value
}

func (t instantiate୦୦Type୦int16,) Equals(val int16,

// types.go2:97
) Condition {
	return Condition{
		Table:    t.table,
		View:     t.view,
		driver:   t.driver,
		Column:   t.column,
		Operator: OpEquals,
		Value:    val,
	}
}

func (t instantiate୦୦Type୦int16,) NotEquals(val int16,

// types.go2:108
) Condition {
	return Condition{
		Table:    t.table,
		View:     t.view,
		driver:   t.driver,
		Column:   t.column,
		Operator: OpNotEquals,
		Value:    val,
	}
}

func (t instantiate୦୦Type୦int16,) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.value)
}

func (t instantiate୦୦Type୦int16,) Interface() interface{} {
	return t.value
}

func (t instantiate୦୦Type୦int16,) Type() reflect.Type {
	return reflect.TypeOf([0]int16{}).Elem()
}

func (t *instantiate୦୦Type୦int16,) Pointer() interface{} {
	return &t.value
}

func (t *instantiate୦୦Type୦int16,) Make(length int) interface{} {
	if len(t.slice) != length {
		t.slice = make([]int16, length)
	}
	return t.slice
}

func (t *instantiate୦୦Type୦int16,) Slice(index int) interface{} {
	if index < len(t.slice) && index >= 0 {
		return &t.slice[index]
	}
	return nil
}

func (t *instantiate୦୦Type୦int16,) Index(index int) bool {
	if index < len(t.slice) && index >= 0 {
		t.value = t.slice[index]
		return true
	}
	return false
}

func (t *instantiate୦୦Type୦int16,) setprivate(
	table, column string,
	field int,
	key bool,
	driver Driver,
	view Table,
) {

	t.table = table
	t.column = column
	t.field = field
	t.key = key
	t.driver = driver
	t.view = view
}

func (t *instantiate୦୦Type୦int16,) Set(val int16,

// types.go2:173
) {
	t.value = val
}

func (t instantiate୦୦Type୦int16,) To(val int16,

// types.go2:177
) Update {
	return Update{
		Table:  t.table,
		driver: t.driver,
		Column: t.column,
		Value:  val,
	}
}

func (t instantiate୦୦Type୦int16,) On(other struct{ instantiate୦୦Type୦int16 }) Linker {
	return Linker{
		From: t,
		To:   other,
	}
}

// types.go2:194
func (t instantiate୦୦Type୦int16,) Test(ctx *testing.T) {
	var Testable struct {
		View `db:"testable"`

		Value instantiate୦୦Type୦int16
	}

	defer Open().Connect(&Testable).Close()

	shouldNotError(
		Sync(Testable),
	).Test(ctx)

			var zero int16

// types.go2:211
 var test = Testable
	test.Value.Set(zero)

	shouldNotError(
		Insert(test),
	).Test(ctx)

// types.go2:219
 var result = Testable

	shouldNotError(
		If(Testable.Value.Equals(zero)).Get(&result),
	).Test(ctx)

			shouldBe(zero)(result.Value.Value()).Test(ctx)

// types.go2:228
 shouldNotError(
		If(Testable.Value.Equals(zero)).Update(
			result.Value.To(zero),
		),
	).Test(ctx)

// types.go2:235
 shouldNotError(
		Delete(&Testable),
	).Test(ctx)
}

// types.go2:238
type instantiate୦୦Type୦int32 struct {
// types.go2:34
 driver        Driver
			table, column string
			field         int
			view          Table

			key bool

			value int32

// types.go2:42
 slice []int32

			master *int32
}

func (t instantiate୦୦Type୦int32,) Column() string {
	return t.column
}

func (t instantiate୦୦Type୦int32,) FieldName() string {
	return t.column
}

func (t instantiate୦୦Type୦int32,) Field() int {
	return t.field
}

func (t instantiate୦୦Type୦int32,) Database() Driver {
	return t.driver
}

func (t instantiate୦୦Type୦int32,) Table() string {
	return t.table
}

func (t *instantiate୦୦Type୦int32,) Master() bool {
	return t.master == &t.value
}

func (t instantiate୦୦Type୦int32,) Key() bool {
	return t.key
}

func (t instantiate୦୦Type୦int32,) String() string {
	return fmt.Sprint(t.value)
}

func (t instantiate୦୦Type୦int32,) Increasing() Sorter {
	return Sorter{
		t.column,
		false,
	}
}

func (t instantiate୦୦Type୦int32,) Decreasing() Sorter {
	return Sorter{
		t.column,
		true,
	}
}

func (t instantiate୦୦Type୦int32,) Value() int32 {
	return t.value
}

func (t instantiate୦୦Type୦int32,) Equals(val int32,

// types.go2:97
) Condition {
	return Condition{
		Table:    t.table,
		View:     t.view,
		driver:   t.driver,
		Column:   t.column,
		Operator: OpEquals,
		Value:    val,
	}
}

func (t instantiate୦୦Type୦int32,) NotEquals(val int32,

// types.go2:108
) Condition {
	return Condition{
		Table:    t.table,
		View:     t.view,
		driver:   t.driver,
		Column:   t.column,
		Operator: OpNotEquals,
		Value:    val,
	}
}

func (t instantiate୦୦Type୦int32,) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.value)
}

func (t instantiate୦୦Type୦int32,) Interface() interface{} {
	return t.value
}

func (t instantiate୦୦Type୦int32,) Type() reflect.Type {
	return reflect.TypeOf([0]int32{}).Elem()
}

func (t *instantiate୦୦Type୦int32,) Pointer() interface{} {
	return &t.value
}

func (t *instantiate୦୦Type୦int32,) Make(length int) interface{} {
	if len(t.slice) != length {
		t.slice = make([]int32, length)
	}
	return t.slice
}

func (t *instantiate୦୦Type୦int32,) Slice(index int) interface{} {
	if index < len(t.slice) && index >= 0 {
		return &t.slice[index]
	}
	return nil
}

func (t *instantiate୦୦Type୦int32,) Index(index int) bool {
	if index < len(t.slice) && index >= 0 {
		t.value = t.slice[index]
		return true
	}
	return false
}

func (t *instantiate୦୦Type୦int32,) setprivate(
	table, column string,
	field int,
	key bool,
	driver Driver,
	view Table,
) {

	t.table = table
	t.column = column
	t.field = field
	t.key = key
	t.driver = driver
	t.view = view
}

func (t *instantiate୦୦Type୦int32,) Set(val int32,

// types.go2:173
) {
	t.value = val
}

func (t instantiate୦୦Type୦int32,) To(val int32,

// types.go2:177
) Update {
	return Update{
		Table:  t.table,
		driver: t.driver,
		Column: t.column,
		Value:  val,
	}
}

func (t instantiate୦୦Type୦int32,) On(other struct{ instantiate୦୦Type୦int32 }) Linker {
	return Linker{
		From: t,
		To:   other,
	}
}

// types.go2:194
func (t instantiate୦୦Type୦int32,) Test(ctx *testing.T) {
	var Testable struct {
		View `db:"testable"`

		Value instantiate୦୦Type୦int32
	}

	defer Open().Connect(&Testable).Close()

	shouldNotError(
		Sync(Testable),
	).Test(ctx)

			var zero int32

// types.go2:211
 var test = Testable
	test.Value.Set(zero)

	shouldNotError(
		Insert(test),
	).Test(ctx)

// types.go2:219
 var result = Testable

	shouldNotError(
		If(Testable.Value.Equals(zero)).Get(&result),
	).Test(ctx)

			shouldBe(zero)(result.Value.Value()).Test(ctx)

// types.go2:228
 shouldNotError(
		If(Testable.Value.Equals(zero)).Update(
			result.Value.To(zero),
		),
	).Test(ctx)

// types.go2:235
 shouldNotError(
		Delete(&Testable),
	).Test(ctx)
}

// types.go2:238
type instantiate୦୦Type୦int64 struct {
// types.go2:34
 driver        Driver
			table, column string
			field         int
			view          Table

			key bool

			value int64

// types.go2:42
 slice []int64

			master *int64
}

func (t instantiate୦୦Type୦int64,) Column() string {
	return t.column
}

func (t instantiate୦୦Type୦int64,) FieldName() string {
	return t.column
}

func (t instantiate୦୦Type୦int64,) Field() int {
	return t.field
}

func (t instantiate୦୦Type୦int64,) Database() Driver {
	return t.driver
}

func (t instantiate୦୦Type୦int64,) Table() string {
	return t.table
}

func (t *instantiate୦୦Type୦int64,) Master() bool {
	return t.master == &t.value
}

func (t instantiate୦୦Type୦int64,) Key() bool {
	return t.key
}

func (t instantiate୦୦Type୦int64,) String() string {
	return fmt.Sprint(t.value)
}

func (t instantiate୦୦Type୦int64,) Increasing() Sorter {
	return Sorter{
		t.column,
		false,
	}
}

func (t instantiate୦୦Type୦int64,) Decreasing() Sorter {
	return Sorter{
		t.column,
		true,
	}
}

func (t instantiate୦୦Type୦int64,) Value() int64 {
	return t.value
}

func (t instantiate୦୦Type୦int64,) Equals(val int64,

// types.go2:97
) Condition {
	return Condition{
		Table:    t.table,
		View:     t.view,
		driver:   t.driver,
		Column:   t.column,
		Operator: OpEquals,
		Value:    val,
	}
}

func (t instantiate୦୦Type୦int64,) NotEquals(val int64,

// types.go2:108
) Condition {
	return Condition{
		Table:    t.table,
		View:     t.view,
		driver:   t.driver,
		Column:   t.column,
		Operator: OpNotEquals,
		Value:    val,
	}
}

func (t instantiate୦୦Type୦int64,) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.value)
}

func (t instantiate୦୦Type୦int64,) Interface() interface{} {
	return t.value
}

func (t instantiate୦୦Type୦int64,) Type() reflect.Type {
	return reflect.TypeOf([0]int64{}).Elem()
}

func (t *instantiate୦୦Type୦int64,) Pointer() interface{} {
	return &t.value
}

func (t *instantiate୦୦Type୦int64,) Make(length int) interface{} {
	if len(t.slice) != length {
		t.slice = make([]int64, length)
	}
	return t.slice
}

func (t *instantiate୦୦Type୦int64,) Slice(index int) interface{} {
	if index < len(t.slice) && index >= 0 {
		return &t.slice[index]
	}
	return nil
}

func (t *instantiate୦୦Type୦int64,) Index(index int) bool {
	if index < len(t.slice) && index >= 0 {
		t.value = t.slice[index]
		return true
	}
	return false
}

func (t *instantiate୦୦Type୦int64,) setprivate(
	table, column string,
	field int,
	key bool,
	driver Driver,
	view Table,
) {

	t.table = table
	t.column = column
	t.field = field
	t.key = key
	t.driver = driver
	t.view = view
}

func (t *instantiate୦୦Type୦int64,) Set(val int64,

// types.go2:173
) {
	t.value = val
}

func (t instantiate୦୦Type୦int64,) To(val int64,

// types.go2:177
) Update {
	return Update{
		Table:  t.table,
		driver: t.driver,
		Column: t.column,
		Value:  val,
	}
}

func (t instantiate୦୦Type୦int64,) On(other struct{ instantiate୦୦Type୦int64 }) Linker {
	return Linker{
		From: t,
		To:   other,
	}
}

// types.go2:194
func (t instantiate୦୦Type୦int64,) Test(ctx *testing.T) {
	var Testable struct {
		View `db:"testable"`

		Value instantiate୦୦Type୦int64
	}

	defer Open().Connect(&Testable).Close()

	shouldNotError(
		Sync(Testable),
	).Test(ctx)

			var zero int64

// types.go2:211
 var test = Testable
	test.Value.Set(zero)

	shouldNotError(
		Insert(test),
	).Test(ctx)

// types.go2:219
 var result = Testable

	shouldNotError(
		If(Testable.Value.Equals(zero)).Get(&result),
	).Test(ctx)

			shouldBe(zero)(result.Value.Value()).Test(ctx)

// types.go2:228
 shouldNotError(
		If(Testable.Value.Equals(zero)).Update(
			result.Value.To(zero),
		),
	).Test(ctx)

// types.go2:235
 shouldNotError(
		Delete(&Testable),
	).Test(ctx)
}

// types.go2:238
type instantiate୦୦Type୦float64 struct {
// types.go2:34
 driver        Driver
			table, column string
			field         int
			view          Table

			key bool

			value float64

// types.go2:42
 slice []float64

			master *float64
}

func (t instantiate୦୦Type୦float64,) Column() string {
	return t.column
}

func (t instantiate୦୦Type୦float64,) FieldName() string {
	return t.column
}

func (t instantiate୦୦Type୦float64,) Field() int {
	return t.field
}

func (t instantiate୦୦Type୦float64,) Database() Driver {
	return t.driver
}

func (t instantiate୦୦Type୦float64,) Table() string {
	return t.table
}

func (t *instantiate୦୦Type୦float64,) Master() bool {
	return t.master == &t.value
}

func (t instantiate୦୦Type୦float64,) Key() bool {
	return t.key
}

func (t instantiate୦୦Type୦float64,) String() string {
	return fmt.Sprint(t.value)
}

func (t instantiate୦୦Type୦float64,) Increasing() Sorter {
	return Sorter{
		t.column,
		false,
	}
}

func (t instantiate୦୦Type୦float64,) Decreasing() Sorter {
	return Sorter{
		t.column,
		true,
	}
}

func (t instantiate୦୦Type୦float64,) Value() float64 {
	return t.value
}

func (t instantiate୦୦Type୦float64,) Equals(val float64,

// types.go2:97
) Condition {
	return Condition{
		Table:    t.table,
		View:     t.view,
		driver:   t.driver,
		Column:   t.column,
		Operator: OpEquals,
		Value:    val,
	}
}

func (t instantiate୦୦Type୦float64,) NotEquals(val float64,

// types.go2:108
) Condition {
	return Condition{
		Table:    t.table,
		View:     t.view,
		driver:   t.driver,
		Column:   t.column,
		Operator: OpNotEquals,
		Value:    val,
	}
}

func (t instantiate୦୦Type୦float64,) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.value)
}

func (t instantiate୦୦Type୦float64,) Interface() interface{} {
	return t.value
}

func (t instantiate୦୦Type୦float64,) Type() reflect.Type {
	return reflect.TypeOf([0]float64{}).Elem()
}

func (t *instantiate୦୦Type୦float64,) Pointer() interface{} {
	return &t.value
}

func (t *instantiate୦୦Type୦float64,) Make(length int) interface{} {
	if len(t.slice) != length {
		t.slice = make([]float64, length)
	}
	return t.slice
}

func (t *instantiate୦୦Type୦float64,) Slice(index int) interface{} {
	if index < len(t.slice) && index >= 0 {
		return &t.slice[index]
	}
	return nil
}

func (t *instantiate୦୦Type୦float64,) Index(index int) bool {
	if index < len(t.slice) && index >= 0 {
		t.value = t.slice[index]
		return true
	}
	return false
}

func (t *instantiate୦୦Type୦float64,) setprivate(
	table, column string,
	field int,
	key bool,
	driver Driver,
	view Table,
) {

	t.table = table
	t.column = column
	t.field = field
	t.key = key
	t.driver = driver
	t.view = view
}

func (t *instantiate୦୦Type୦float64,) Set(val float64,

// types.go2:173
) {
	t.value = val
}

func (t instantiate୦୦Type୦float64,) To(val float64,

// types.go2:177
) Update {
	return Update{
		Table:  t.table,
		driver: t.driver,
		Column: t.column,
		Value:  val,
	}
}

func (t instantiate୦୦Type୦float64,) On(other struct {
// types.go2:186
 instantiate୦୦Type୦float64
// types.go2:186
}) Linker {
	return Linker{
		From: t,
		To:   other,
	}
}

// types.go2:194
func (t instantiate୦୦Type୦float64,) Test(ctx *testing.T) {
	var Testable struct {
		View `db:"testable"`

		Value instantiate୦୦Type୦float64
	}

	defer Open().Connect(&Testable).Close()

	shouldNotError(
		Sync(Testable),
	).Test(ctx)

			var zero float64

// types.go2:211
 var test = Testable
	test.Value.Set(zero)

	shouldNotError(
		Insert(test),
	).Test(ctx)

// types.go2:219
 var result = Testable

	shouldNotError(
		If(Testable.Value.Equals(zero)).Get(&result),
	).Test(ctx)

			shouldBe(zero)(result.Value.Value()).Test(ctx)

// types.go2:228
 shouldNotError(
		If(Testable.Value.Equals(zero)).Update(
			result.Value.To(zero),
		),
	).Test(ctx)

// types.go2:235
 shouldNotError(
		Delete(&Testable),
	).Test(ctx)
}

// types.go2:238
type instantiate୦୦Type୦bool struct {
// types.go2:34
 driver        Driver
			table, column string
			field         int
			view          Table

			key bool

			value bool

// types.go2:42
 slice []bool

			master *bool
}

func (t instantiate୦୦Type୦bool,) Column() string {
	return t.column
}

func (t instantiate୦୦Type୦bool,) FieldName() string {
	return t.column
}

func (t instantiate୦୦Type୦bool,) Field() int {
	return t.field
}

func (t instantiate୦୦Type୦bool,) Database() Driver {
	return t.driver
}

func (t instantiate୦୦Type୦bool,) Table() string {
	return t.table
}

func (t *instantiate୦୦Type୦bool,) Master() bool {
	return t.master == &t.value
}

func (t instantiate୦୦Type୦bool,) Key() bool {
	return t.key
}

func (t instantiate୦୦Type୦bool,) String() string {
	return fmt.Sprint(t.value)
}

func (t instantiate୦୦Type୦bool,) Increasing() Sorter {
	return Sorter{
		t.column,
		false,
	}
}

func (t instantiate୦୦Type୦bool,) Decreasing() Sorter {
	return Sorter{
		t.column,
		true,
	}
}

func (t instantiate୦୦Type୦bool,) Value() bool {
	return t.value
}

func (t instantiate୦୦Type୦bool,) Equals(val bool,

// types.go2:97
) Condition {
	return Condition{
		Table:    t.table,
		View:     t.view,
		driver:   t.driver,
		Column:   t.column,
		Operator: OpEquals,
		Value:    val,
	}
}

func (t instantiate୦୦Type୦bool,) NotEquals(val bool,

// types.go2:108
) Condition {
	return Condition{
		Table:    t.table,
		View:     t.view,
		driver:   t.driver,
		Column:   t.column,
		Operator: OpNotEquals,
		Value:    val,
	}
}

func (t instantiate୦୦Type୦bool,) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.value)
}

func (t instantiate୦୦Type୦bool,) Interface() interface{} {
	return t.value
}

func (t instantiate୦୦Type୦bool,) Type() reflect.Type {
	return reflect.TypeOf([0]bool{}).Elem()
}

func (t *instantiate୦୦Type୦bool,) Pointer() interface{} {
	return &t.value
}

func (t *instantiate୦୦Type୦bool,) Make(length int) interface{} {
	if len(t.slice) != length {
		t.slice = make([]bool, length)
	}
	return t.slice
}

func (t *instantiate୦୦Type୦bool,) Slice(index int) interface{} {
	if index < len(t.slice) && index >= 0 {
		return &t.slice[index]
	}
	return nil
}

func (t *instantiate୦୦Type୦bool,) Index(index int) bool {
	if index < len(t.slice) && index >= 0 {
		t.value = t.slice[index]
		return true
	}
	return false
}

func (t *instantiate୦୦Type୦bool,) setprivate(
	table, column string,
	field int,
	key bool,
	driver Driver,
	view Table,
) {

	t.table = table
	t.column = column
	t.field = field
	t.key = key
	t.driver = driver
	t.view = view
}

func (t *instantiate୦୦Type୦bool,) Set(val bool,

// types.go2:173
) {
	t.value = val
}

func (t instantiate୦୦Type୦bool,) To(val bool,

// types.go2:177
) Update {
	return Update{
		Table:  t.table,
		driver: t.driver,
		Column: t.column,
		Value:  val,
	}
}

func (t instantiate୦୦Type୦bool,) On(other struct{ instantiate୦୦Type୦bool }) Linker {
	return Linker{
		From: t,
		To:   other,
	}
}

// types.go2:194
func (t instantiate୦୦Type୦bool,) Test(ctx *testing.T) {
	var Testable struct {
		View `db:"testable"`

		Value instantiate୦୦Type୦bool
	}

	defer Open().Connect(&Testable).Close()

	shouldNotError(
		Sync(Testable),
	).Test(ctx)

			var zero bool

// types.go2:211
 var test = Testable
	test.Value.Set(zero)

	shouldNotError(
		Insert(test),
	).Test(ctx)

// types.go2:219
 var result = Testable

	shouldNotError(
		If(Testable.Value.Equals(zero)).Get(&result),
	).Test(ctx)

			shouldBe(zero)(result.Value.Value()).Test(ctx)

// types.go2:228
 shouldNotError(
		If(Testable.Value.Equals(zero)).Update(
			result.Value.To(zero),
		),
	).Test(ctx)

// types.go2:235
 shouldNotError(
		Delete(&Testable),
	).Test(ctx)
}

// types.go2:238
type instantiate୦୦Type୦୮6୮7byte struct {
// types.go2:34
 driver        Driver
			table, column string
			field         int
			view          Table

			key bool

			value []byte

// types.go2:42
 slice [][]byte

			master *[]byte
}

func (t instantiate୦୦Type୦୮6୮7byte,) Column() string {
	return t.column
}

func (t instantiate୦୦Type୦୮6୮7byte,) FieldName() string {
	return t.column
}

func (t instantiate୦୦Type୦୮6୮7byte,) Field() int {
	return t.field
}

func (t instantiate୦୦Type୦୮6୮7byte,) Database() Driver {
	return t.driver
}

func (t instantiate୦୦Type୦୮6୮7byte,) Table() string {
	return t.table
}

func (t *instantiate୦୦Type୦୮6୮7byte,) Master() bool {
	return t.master == &t.value
}

func (t instantiate୦୦Type୦୮6୮7byte,) Key() bool {
	return t.key
}

func (t instantiate୦୦Type୦୮6୮7byte,) String() string {
	return fmt.Sprint(t.value)
}

func (t instantiate୦୦Type୦୮6୮7byte,) Increasing() Sorter {
	return Sorter{
		t.column,
		false,
	}
}

func (t instantiate୦୦Type୦୮6୮7byte,) Decreasing() Sorter {
	return Sorter{
		t.column,
		true,
	}
}

func (t instantiate୦୦Type୦୮6୮7byte,) Value() []byte {
	return t.value
}

func (t instantiate୦୦Type୦୮6୮7byte,) Equals(val []byte,

// types.go2:97
) Condition {
	return Condition{
		Table:    t.table,
		View:     t.view,
		driver:   t.driver,
		Column:   t.column,
		Operator: OpEquals,
		Value:    val,
	}
}

func (t instantiate୦୦Type୦୮6୮7byte,) NotEquals(val []byte,

// types.go2:108
) Condition {
	return Condition{
		Table:    t.table,
		View:     t.view,
		driver:   t.driver,
		Column:   t.column,
		Operator: OpNotEquals,
		Value:    val,
	}
}

func (t instantiate୦୦Type୦୮6୮7byte,) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.value)
}

func (t instantiate୦୦Type୦୮6୮7byte,) Interface() interface{} {
	return t.value
}

func (t instantiate୦୦Type୦୮6୮7byte,) Type() reflect.Type {
	return reflect.TypeOf([0][]byte{}).Elem()
}

func (t *instantiate୦୦Type୦୮6୮7byte,) Pointer() interface{} {
	return &t.value
}

func (t *instantiate୦୦Type୦୮6୮7byte,) Make(length int) interface{} {
	if len(t.slice) != length {
		t.slice = make([][]byte, length)
	}
	return t.slice
}

func (t *instantiate୦୦Type୦୮6୮7byte,) Slice(index int) interface{} {
	if index < len(t.slice) && index >= 0 {
		return &t.slice[index]
	}
	return nil
}

func (t *instantiate୦୦Type୦୮6୮7byte,) Index(index int) bool {
	if index < len(t.slice) && index >= 0 {
		t.value = t.slice[index]
		return true
	}
	return false
}

func (t *instantiate୦୦Type୦୮6୮7byte,) setprivate(
	table, column string,
	field int,
	key bool,
	driver Driver,
	view Table,
) {

	t.table = table
	t.column = column
	t.field = field
	t.key = key
	t.driver = driver
	t.view = view
}

func (t *instantiate୦୦Type୦୮6୮7byte,) Set(val []byte,

// types.go2:173
) {
	t.value = val
}

func (t instantiate୦୦Type୦୮6୮7byte,) To(val []byte,

// types.go2:177
) Update {
	return Update{
		Table:  t.table,
		driver: t.driver,
		Column: t.column,
		Value:  val,
	}
}

func (t instantiate୦୦Type୦୮6୮7byte,) On(other struct {
// types.go2:186
 instantiate୦୦Type୦୮6୮7byte
// types.go2:186
}) Linker {
	return Linker{
		From: t,
		To:   other,
	}
}

// types.go2:194
func (t instantiate୦୦Type୦୮6୮7byte,) Test(ctx *testing.T) {
	var Testable struct {
		View `db:"testable"`

		Value instantiate୦୦Type୦୮6୮7byte
	}

	defer Open().Connect(&Testable).Close()

	shouldNotError(
		Sync(Testable),
	).Test(ctx)

			var zero []byte

// types.go2:211
 var test = Testable
	test.Value.Set(zero)

	shouldNotError(
		Insert(test),
	).Test(ctx)

// types.go2:219
 var result = Testable

	shouldNotError(
		If(Testable.Value.Equals(zero)).Get(&result),
	).Test(ctx)

			shouldBe(zero)(result.Value.Value()).Test(ctx)

// types.go2:228
 shouldNotError(
		If(Testable.Value.Equals(zero)).Update(
			result.Value.To(zero),
		),
	).Test(ctx)

// types.go2:235
 shouldNotError(
		Delete(&Testable),
	).Test(ctx)
}

// types.go2:238
type instantiate୦୦Type୦string struct {
// types.go2:34
 driver        Driver
			table, column string
			field         int
			view          Table

			key bool

			value string

// types.go2:42
 slice []string

			master *string
}

func (t instantiate୦୦Type୦string,) Column() string {
	return t.column
}

func (t instantiate୦୦Type୦string,) FieldName() string {
	return t.column
}

func (t instantiate୦୦Type୦string,) Field() int {
	return t.field
}

func (t instantiate୦୦Type୦string,) Database() Driver {
	return t.driver
}

func (t instantiate୦୦Type୦string,) Table() string {
	return t.table
}

func (t *instantiate୦୦Type୦string,) Master() bool {
	return t.master == &t.value
}

func (t instantiate୦୦Type୦string,) Key() bool {
	return t.key
}

func (t instantiate୦୦Type୦string,) String() string {
	return fmt.Sprint(t.value)
}

func (t instantiate୦୦Type୦string,) Increasing() Sorter {
	return Sorter{
		t.column,
		false,
	}
}

func (t instantiate୦୦Type୦string,) Decreasing() Sorter {
	return Sorter{
		t.column,
		true,
	}
}

func (t instantiate୦୦Type୦string,) Value() string {
	return t.value
}

func (t instantiate୦୦Type୦string,) Equals(val string,

// types.go2:97
) Condition {
	return Condition{
		Table:    t.table,
		View:     t.view,
		driver:   t.driver,
		Column:   t.column,
		Operator: OpEquals,
		Value:    val,
	}
}

func (t instantiate୦୦Type୦string,) NotEquals(val string,

// types.go2:108
) Condition {
	return Condition{
		Table:    t.table,
		View:     t.view,
		driver:   t.driver,
		Column:   t.column,
		Operator: OpNotEquals,
		Value:    val,
	}
}

func (t instantiate୦୦Type୦string,) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.value)
}

func (t instantiate୦୦Type୦string,) Interface() interface{} {
	return t.value
}

func (t instantiate୦୦Type୦string,) Type() reflect.Type {
	return reflect.TypeOf([0]string{}).Elem()
}

func (t *instantiate୦୦Type୦string,) Pointer() interface{} {
	return &t.value
}

func (t *instantiate୦୦Type୦string,) Make(length int) interface{} {
	if len(t.slice) != length {
		t.slice = make([]string, length)
	}
	return t.slice
}

func (t *instantiate୦୦Type୦string,) Slice(index int) interface{} {
	if index < len(t.slice) && index >= 0 {
		return &t.slice[index]
	}
	return nil
}

func (t *instantiate୦୦Type୦string,) Index(index int) bool {
	if index < len(t.slice) && index >= 0 {
		t.value = t.slice[index]
		return true
	}
	return false
}

func (t *instantiate୦୦Type୦string,) setprivate(
	table, column string,
	field int,
	key bool,
	driver Driver,
	view Table,
) {

	t.table = table
	t.column = column
	t.field = field
	t.key = key
	t.driver = driver
	t.view = view
}

func (t *instantiate୦୦Type୦string,) Set(val string,

// types.go2:173
) {
	t.value = val
}

func (t instantiate୦୦Type୦string,) To(val string,

// types.go2:177
) Update {
	return Update{
		Table:  t.table,
		driver: t.driver,
		Column: t.column,
		Value:  val,
	}
}

func (t instantiate୦୦Type୦string,) On(other struct{ instantiate୦୦Type୦string }) Linker {
	return Linker{
		From: t,
		To:   other,
	}
}

// types.go2:194
func (t instantiate୦୦Type୦string,) Test(ctx *testing.T) {
	var Testable struct {
		View `db:"testable"`

		Value instantiate୦୦Type୦string
	}

	defer Open().Connect(&Testable).Close()

	shouldNotError(
		Sync(Testable),
	).Test(ctx)

			var zero string

// types.go2:211
 var test = Testable
	test.Value.Set(zero)

	shouldNotError(
		Insert(test),
	).Test(ctx)

// types.go2:219
 var result = Testable

	shouldNotError(
		If(Testable.Value.Equals(zero)).Get(&result),
	).Test(ctx)

			shouldBe(zero)(result.Value.Value()).Test(ctx)

// types.go2:228
 shouldNotError(
		If(Testable.Value.Equals(zero)).Update(
			result.Value.To(zero),
		),
	).Test(ctx)

// types.go2:235
 shouldNotError(
		Delete(&Testable),
	).Test(ctx)
}

// types.go2:238
type instantiate୦୦Type୦time୮aTime struct {
// types.go2:34
 driver        Driver
			table, column string
			field         int
			view          Table

			key bool

			value time.Time

// types.go2:42
 slice []time.Time

			master *time.Time
}

func (t instantiate୦୦Type୦time୮aTime,) Column() string {
	return t.column
}

func (t instantiate୦୦Type୦time୮aTime,) FieldName() string {
	return t.column
}

func (t instantiate୦୦Type୦time୮aTime,) Field() int {
	return t.field
}

func (t instantiate୦୦Type୦time୮aTime,) Database() Driver {
	return t.driver
}

func (t instantiate୦୦Type୦time୮aTime,) Table() string {
	return t.table
}

func (t *instantiate୦୦Type୦time୮aTime,) Master() bool {
	return t.master == &t.value
}

func (t instantiate୦୦Type୦time୮aTime,) Key() bool {
	return t.key
}

func (t instantiate୦୦Type୦time୮aTime,) String() string {
	return fmt.Sprint(t.value)
}

func (t instantiate୦୦Type୦time୮aTime,) Increasing() Sorter {
	return Sorter{
		t.column,
		false,
	}
}

func (t instantiate୦୦Type୦time୮aTime,) Decreasing() Sorter {
	return Sorter{
		t.column,
		true,
	}
}

func (t instantiate୦୦Type୦time୮aTime,) Value() time.Time {
	return t.value
}

func (t instantiate୦୦Type୦time୮aTime,) Equals(val time.Time,

// types.go2:97
) Condition {
	return Condition{
		Table:    t.table,
		View:     t.view,
		driver:   t.driver,
		Column:   t.column,
		Operator: OpEquals,
		Value:    val,
	}
}

func (t instantiate୦୦Type୦time୮aTime,) NotEquals(val time.Time,

// types.go2:108
) Condition {
	return Condition{
		Table:    t.table,
		View:     t.view,
		driver:   t.driver,
		Column:   t.column,
		Operator: OpNotEquals,
		Value:    val,
	}
}

func (t instantiate୦୦Type୦time୮aTime,) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.value)
}

func (t instantiate୦୦Type୦time୮aTime,) Interface() interface{} {
	return t.value
}

func (t instantiate୦୦Type୦time୮aTime,) Type() reflect.Type {
	return reflect.TypeOf([0]time.Time{}).Elem()
}

func (t *instantiate୦୦Type୦time୮aTime,) Pointer() interface{} {
	return &t.value
}

func (t *instantiate୦୦Type୦time୮aTime,) Make(length int) interface{} {
	if len(t.slice) != length {
		t.slice = make([]time.Time, length)
	}
	return t.slice
}

func (t *instantiate୦୦Type୦time୮aTime,) Slice(index int) interface{} {
	if index < len(t.slice) && index >= 0 {
		return &t.slice[index]
	}
	return nil
}

func (t *instantiate୦୦Type୦time୮aTime,) Index(index int) bool {
	if index < len(t.slice) && index >= 0 {
		t.value = t.slice[index]
		return true
	}
	return false
}

func (t *instantiate୦୦Type୦time୮aTime,) setprivate(
	table, column string,
	field int,
	key bool,
	driver Driver,
	view Table,
) {

	t.table = table
	t.column = column
	t.field = field
	t.key = key
	t.driver = driver
	t.view = view
}

func (t *instantiate୦୦Type୦time୮aTime,) Set(val time.Time,

// types.go2:173
) {
	t.value = val
}

func (t instantiate୦୦Type୦time୮aTime,) To(val time.Time,

// types.go2:177
) Update {
	return Update{
		Table:  t.table,
		driver: t.driver,
		Column: t.column,
		Value:  val,
	}
}

func (t instantiate୦୦Type୦time୮aTime,) On(other struct {
// types.go2:186
 instantiate୦୦Type୦time୮aTime
// types.go2:186
}) Linker {
	return Linker{
		From: t,
		To:   other,
	}
}

// types.go2:194
func (t instantiate୦୦Type୦time୮aTime,) Test(ctx *testing.T) {
	var Testable struct {
		View `db:"testable"`

		Value instantiate୦୦Type୦time୮aTime
	}

	defer Open().Connect(&Testable).Close()

	shouldNotError(
		Sync(Testable),
	).Test(ctx)

			var zero time.Time

// types.go2:211
 var test = Testable
	test.Value.Set(zero)

	shouldNotError(
		Insert(test),
	).Test(ctx)

// types.go2:219
 var result = Testable

	shouldNotError(
		If(Testable.Value.Equals(zero)).Get(&result),
	).Test(ctx)

			shouldBe(zero)(result.Value.Value()).Test(ctx)

// types.go2:228
 shouldNotError(
		If(Testable.Value.Equals(zero)).Update(
			result.Value.To(zero),
		),
	).Test(ctx)

// types.go2:235
 shouldNotError(
		Delete(&Testable),
	).Test(ctx)
}

// types.go2:238
type instantiate୦୦Type୦db୮auid struct {
// types.go2:34
 driver        Driver
			table, column string
			field         int
			view          Table

			key bool

			value uid

// types.go2:42
 slice []uid

			master *uid
}

func (t instantiate୦୦Type୦db୮auid,) Column() string {
	return t.column
}

func (t instantiate୦୦Type୦db୮auid,) FieldName() string {
	return t.column
}

func (t instantiate୦୦Type୦db୮auid,) Field() int {
	return t.field
}

func (t instantiate୦୦Type୦db୮auid,) Database() Driver {
	return t.driver
}

func (t instantiate୦୦Type୦db୮auid,) Table() string {
	return t.table
}

func (t *instantiate୦୦Type୦db୮auid,) Master() bool {
	return t.master == &t.value
}

func (t instantiate୦୦Type୦db୮auid,) Key() bool {
	return t.key
}

func (t instantiate୦୦Type୦db୮auid,) String() string {
	return fmt.Sprint(t.value)
}

func (t instantiate୦୦Type୦db୮auid,) Increasing() Sorter {
	return Sorter{
		t.column,
		false,
	}
}

func (t instantiate୦୦Type୦db୮auid,) Decreasing() Sorter {
	return Sorter{
		t.column,
		true,
	}
}

func (t instantiate୦୦Type୦db୮auid,) Value() uid {
	return t.value
}

func (t instantiate୦୦Type୦db୮auid,) Equals(val uid,

// types.go2:97
) Condition {
	return Condition{
		Table:    t.table,
		View:     t.view,
		driver:   t.driver,
		Column:   t.column,
		Operator: OpEquals,
		Value:    val,
	}
}

func (t instantiate୦୦Type୦db୮auid,) NotEquals(val uid,

// types.go2:108
) Condition {
	return Condition{
		Table:    t.table,
		View:     t.view,
		driver:   t.driver,
		Column:   t.column,
		Operator: OpNotEquals,
		Value:    val,
	}
}

func (t instantiate୦୦Type୦db୮auid,) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.value)
}

func (t instantiate୦୦Type୦db୮auid,) Interface() interface{} {
	return t.value
}

func (t instantiate୦୦Type୦db୮auid,) Type() reflect.Type {
	return reflect.TypeOf([0]uid{}).Elem()
}

func (t *instantiate୦୦Type୦db୮auid,) Pointer() interface{} {
	return &t.value
}

func (t *instantiate୦୦Type୦db୮auid,) Make(length int) interface{} {
	if len(t.slice) != length {
		t.slice = make([]uid, length)
	}
	return t.slice
}

func (t *instantiate୦୦Type୦db୮auid,) Slice(index int) interface{} {
	if index < len(t.slice) && index >= 0 {
		return &t.slice[index]
	}
	return nil
}

func (t *instantiate୦୦Type୦db୮auid,) Index(index int) bool {
	if index < len(t.slice) && index >= 0 {
		t.value = t.slice[index]
		return true
	}
	return false
}

func (t *instantiate୦୦Type୦db୮auid,) setprivate(
	table, column string,
	field int,
	key bool,
	driver Driver,
	view Table,
) {

	t.table = table
	t.column = column
	t.field = field
	t.key = key
	t.driver = driver
	t.view = view
}

func (t *instantiate୦୦Type୦db୮auid,) Set(val uid,

// types.go2:173
) {
	t.value = val
}

func (t instantiate୦୦Type୦db୮auid,) To(val uid,

// types.go2:177
) Update {
	return Update{
		Table:  t.table,
		driver: t.driver,
		Column: t.column,
		Value:  val,
	}
}

func (t instantiate୦୦Type୦db୮auid,) On(other struct {
// types.go2:186
 instantiate୦୦Type୦db୮auid
// types.go2:186
}) Linker {
	return Linker{
		From: t,
		To:   other,
	}
}

// types.go2:194
func (t instantiate୦୦Type୦db୮auid,) Test(ctx *testing.T) {
	var Testable struct {
		View `db:"testable"`

		Value instantiate୦୦Type୦db୮auid
	}

	defer Open().Connect(&Testable).Close()

	shouldNotError(
		Sync(Testable),
	).Test(ctx)

			var zero uid

// types.go2:211
 var test = Testable
	test.Value.Set(zero)

	shouldNotError(
		Insert(test),
	).Test(ctx)

// types.go2:219
 var result = Testable

	shouldNotError(
		If(Testable.Value.Equals(zero)).Get(&result),
	).Test(ctx)

			shouldBe(zero)(result.Value.Value()).Test(ctx)

// types.go2:228
 shouldNotError(
		If(Testable.Value.Equals(zero)).Update(
			result.Value.To(zero),
		),
	).Test(ctx)

// types.go2:235
 shouldNotError(
		Delete(&Testable),
	).Test(ctx)
}

// types.go2:238
type Importable୦ int

// types.go2:238
var _ = json.Compact
// types.go2:238
var _ = fmt.Errorf
// types.go2:238
var _ = reflect.Append
// types.go2:238
var _ = testing.AllocsPerRun

// types.go2:238
const _ = time.ANSIC
